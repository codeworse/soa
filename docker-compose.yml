version: '3.9'

services:
  postgres_auth:
    image: postgres:16
    container_name: auth_database
    environment:
      POSTGRES_USER: auth_admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: auth_db
      PGDATA: /var/lib/postgresql/data/auth_pgdata
      PGPORT: 5433
    ports:
      - "5433:5433"
    volumes:
      - ./auth_pgdata:/var/lib/postgresql/data/auth_pgdata
      - ./auth/postgresql/schemas/info.sql:/docker-entrypoint-initdb.d/info.sql
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U auth_admin -d auth_db" ]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres_action:
    image: postgres:16
    container_name: act_database
    environment:
      POSTGRES_USER: act_admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: act_db
      PGDATA: /var/lib/postgresql/data/act_pgdata
      PGPORT: 5434
    ports:
      - "5434:5434"
    volumes:
      - ./act_pgdata:/var/lib/postgresql/data/pgdata
      - ./act/postgresql/schemas/info.sql:/docker-entrypoint-initdb.d/info.sql
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U act_admin -d act_db" ]
      interval: 30s
      timeout: 10s
      retries: 5
  act:
    build:
      context: act
      dockerfile: Dockerfile
    container_name: act_service
    environment:
      DB_HOST: act_database
      DB_PORT: 5434
      DB_NAME: act_db
      DB_USER: act_admin
      DB_PASSWORD: admin
      SERVER_HOST: "0.0.0.0"
      SERVER_PORT: 50051
    ports:
      - "50051:50051"
    depends_on:
      - postgres_action
  
  auth:
    build:
      context: auth
      dockerfile: Dockerfile
    container_name: auth_service
    environment:
      DB_HOST: auth_database
      DB_PORT: 5433
      DB_NAME: auth_db
      DB_USER: auth_admin
      DB_PASSWORD: admin
    ports:
      - "8003:5000"
    depends_on:
      - postgres_auth
  api:
    build:
      context: api
      dockerfile: Dockerfile
    container_name: api_service
    ports:
      - "8002:5000"
  kafka:
    image: bitnami/kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      BITNAMI_DEBUG: "true"
      KAFKA_ENABLE_KRAFT: "true"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_HOST://:29092"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CFG_LOG_DIR: "/tmp/kraft-combined-logs"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: "1"
    volumes:
      - ./kafka-data:/tmp/kraft-combined-logs
  kafka-init:
    image: bitnami/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # Wait for Kafka to be ready
      while ! kafka-topics --bootstrap-server kafka:9092 --list; do
        echo 'Waiting for Kafka to be ready...'
        sleep 3
      done

      # Create topics if they don't exist
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists \
        --topic user_registrations --partitions 1 --replication-factor 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists \
        --topic user_actions_likes_clicks --partitions 1 --replication-factor 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists \
        --topic user_actions_views --partitions 1 --replication-factor 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists \
        --topic user_actions_comments --partitions 1 --replication-factor 1
      echo 'Kafka topics created successfully!'
      exit 0
      "
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 5s
      timeout: 10s
      retries: 10
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8082:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: true
volumes:
  auth_pgdata:
  act_pgdata:
